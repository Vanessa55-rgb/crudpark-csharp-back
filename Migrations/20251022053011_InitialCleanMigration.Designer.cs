// <auto-generated />
using System;
using CrudParking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudParking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022053011_InitialCleanMigration")]
    partial class InitialCleanMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrudParking.Models.MembershipPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.ToTable("MembershipPlans");
                });

            modelBuilder.Entity("CrudParking.Models.Monthly", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("VehicleMonthlyID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("VehicleMonthlyID");

                    b.ToTable("Monthlies");
                });

            modelBuilder.Entity("CrudParking.Models.Operator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("CrudParking.Models.Pay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DatePay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TicketID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("TicketID")
                        .IsUnique();

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("CrudParking.Models.Rate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("BaseValueByFraction")
                        .HasColumnType("double precision");

                    b.Property<double>("BaseValueByHour")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("MaxDay")
                        .HasColumnType("numeric");

                    b.Property<int>("TimeHopeMinutes")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("CrudParking.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CrudParking.Models.VehicleMonthly", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Titularname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("VehiclesM");
                });

            modelBuilder.Entity("CrudParking.Models.Monthly", b =>
                {
                    b.HasOne("CrudParking.Models.VehicleMonthly", "VehicleMonthly")
                        .WithMany("Monthlies")
                        .HasForeignKey("VehicleMonthlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleMonthly");
                });

            modelBuilder.Entity("CrudParking.Models.Pay", b =>
                {
                    b.HasOne("CrudParking.Models.Operator", "Operator")
                        .WithMany("Pays")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudParking.Models.Ticket", "Ticket")
                        .WithOne("Pay")
                        .HasForeignKey("CrudParking.Models.Pay", "TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CrudParking.Models.Ticket", b =>
                {
                    b.HasOne("CrudParking.Models.Operator", "Operator")
                        .WithMany("Tickets")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("CrudParking.Models.Operator", b =>
                {
                    b.Navigation("Pays");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CrudParking.Models.Ticket", b =>
                {
                    b.Navigation("Pay");
                });

            modelBuilder.Entity("CrudParking.Models.VehicleMonthly", b =>
                {
                    b.Navigation("Monthlies");
                });
#pragma warning restore 612, 618
        }
    }
}
